import { promises as fs } from 'fs'
import { resolve } from 'pathe'
import { escapeRegex, uniq } from './utils'
import { parseImports } from './parse'

const composables = [
  '$fetch',
  'definePageComponent',
  'usePage',
  'useRoute',
  'useHead',
  'useFetch',
  'useAsyncData',
]

function wordBoundary (word: string) {
  return word.startsWith('$') ? `${escapeRegex(word)}\\b` : `\\b${word}\\b`
}

const composablesCapture = `(${composables.map(wordBoundary).join('|')})`

const definitionRegex = new RegExp(`(?:function|const|let|var)\\s+${composablesCapture}`, 'g')
const composableUsageRegex = new RegExp(`${composablesCapture}\\s*\\(`, 'g')

export async function autoImportComposables (code: string, id: string): Promise<string | undefined> {
  const matches = Array.from(code.matchAll(composableUsageRegex))
  if (matches.length === 0) return

  const imports = await parseImports(code)
  const defined = new Set(Array.from(code.matchAll(definitionRegex)).map(a => a[1]))

  const composables = uniq(matches.map(a => a[1]))
    .filter(composable => !defined.has(composable) && !imports[composable])
    .join(', ')

  if (composables)
    return `${code}\nimport { ${composables} } from "iles"`
}

export function writeComposablesDTS (root: string) {
  fs.writeFile(resolve(root, 'composables.d.ts'), `// generated by iles
// We suggest you to commit this file into source control

declare global {
  const definePageComponent: typeof import('iles')['definePageComponent']
  const useHead: typeof import('iles')['useHead']
  const usePage: typeof import('iles')['usePage']
  const useRoute: typeof import('iles')['useRoute']
}

export { }
`, 'utf-8')
}
